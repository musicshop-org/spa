/* tslint:disable */
/* eslint-disable */
/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AlbumDTO
 */
export interface AlbumDTO {
    /**
     * 
     * @type {string}
     * @memberof AlbumDTO
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof AlbumDTO
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof AlbumDTO
     */
    'stock'?: number;
    /**
     * 
     * @type {string}
     * @memberof AlbumDTO
     */
    'mediumType'?: AlbumDTOMediumTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AlbumDTO
     */
    'releaseDate'?: string;
    /**
     * 
     * @type {AlbumId}
     * @memberof AlbumDTO
     */
    'albumId'?: AlbumId;
    /**
     * 
     * @type {string}
     * @memberof AlbumDTO
     */
    'label'?: string;
    /**
     * 
     * @type {Set<SongDTO>}
     * @memberof AlbumDTO
     */
    'songs'?: Set<SongDTO>;
}

export const AlbumDTOMediumTypeEnum = {
    Cd: 'CD',
    Digital: 'DIGITAL',
    Vinyl: 'VINYL'
} as const;

export type AlbumDTOMediumTypeEnum = typeof AlbumDTOMediumTypeEnum[keyof typeof AlbumDTOMediumTypeEnum];

/**
 * 
 * @export
 * @interface AlbumId
 */
export interface AlbumId {
    /**
     * 
     * @type {string}
     * @memberof AlbumId
     */
    'albumId'?: string;
}
/**
 * 
 * @export
 * @interface ArtistDTO
 */
export interface ArtistDTO {
    /**
     * 
     * @type {string}
     * @memberof ArtistDTO
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface SongDTO
 */
export interface SongDTO {
    /**
     * 
     * @type {string}
     * @memberof SongDTO
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof SongDTO
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof SongDTO
     */
    'stock'?: number;
    /**
     * 
     * @type {string}
     * @memberof SongDTO
     */
    'mediumType'?: SongDTOMediumTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SongDTO
     */
    'releaseDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof SongDTO
     */
    'genre'?: string;
    /**
     * 
     * @type {Array<ArtistDTO>}
     * @memberof SongDTO
     */
    'artists'?: Array<ArtistDTO>;
    /**
     * 
     * @type {Set<AlbumDTO>}
     * @memberof SongDTO
     */
    'inAlbum'?: Set<AlbumDTO>;
}

export const SongDTOMediumTypeEnum = {
    Cd: 'CD',
    Digital: 'DIGITAL',
    Vinyl: 'VINYL'
} as const;

export type SongDTOMediumTypeEnum = typeof SongDTOMediumTypeEnum[keyof typeof SongDTOMediumTypeEnum];


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} songTitle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAlbumsBySongTitle: async (songTitle: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'songTitle' is not null or undefined
            assertParamExists('findAlbumsBySongTitle', 'songTitle', songTitle)
            const localVarPath = `/api/albums/{songTitle}`
                .replace(`{${"songTitle"}}`, encodeURIComponent(String(songTitle)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        welcome: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} songTitle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAlbumsBySongTitle(songTitle: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AlbumDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAlbumsBySongTitle(songTitle, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async welcome(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.welcome(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {string} songTitle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAlbumsBySongTitle(songTitle: string, options?: any): AxiosPromise<Array<AlbumDTO>> {
            return localVarFp.findAlbumsBySongTitle(songTitle, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        welcome(options?: any): AxiosPromise<string> {
            return localVarFp.welcome(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {string} songTitle 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findAlbumsBySongTitle(songTitle: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findAlbumsBySongTitle(songTitle, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public welcome(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).welcome(options).then((request) => request(this.axios, this.basePath));
    }
}


